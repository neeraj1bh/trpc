import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";
import Chat from "Y/components/Chat";
import { Message } from "Y/types";

import { api } from "Y/utils/api";

const Home: NextPage = () => {
  const trpc = api.useContext();

  const { mutate } = api.user.addMessage.useMutation({
    onMutate: async (newPost) => {
      await trpc.user.all.cancel();
      const prevMessageData = trpc.user.all.getData();

      trpc.user.all.setData(undefined, (prev: Message) => {
        const newMessage = newPost;
        if (!prev) return [newMessage];
        return [...prev, newMessage];
      });

      return { prevMessageData };
    },
    onError: (err, newPost, ctx) => {
      if (!ctx) return;
      trpc.user.all.setData(undefined, () => ctx.prevMessageData);
    },
    onSettled: async () => {
      await trpc.user.all.invalidate();
    },
  });

  const { mutate: deleteMutation } = api.user.delete.useMutation({
    onMutate: async (deleteId) => {
      await trpc.user.all.cancel();

      const prevMessageData = trpc.user.all.getData();

      trpc.user.all.setData(undefined, (prev: Message) => {
        if (!prev) return prevMessageData;
        return prev.filter((t: Message) => t._id.toString() !== deleteId);
      });

      return { prevMessageData };
    },
    onError: (err, newPost, ctx) => {
      if (!ctx) return;
      trpc.user.all.setData(undefined, () => ctx.prevMessageData);
    },
    onSettled: async () => {
      await trpc.user.all.invalidate();
    },
  });
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className=" flex h-[100vh] items-center justify-center bg-gradient-to-bl  from-red-200 via-red-300 to-yellow-200 text-gray-900">
        <Chat addMessage={mutate} deleteMutation={deleteMutation} />
      </div>
    </>
  );
};

export default Home;
